<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wshito&#39;s diary</title>
    <link>http://diary.wshito.com/</link>
    <description>Recent content on wshito&#39;s diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>All rights reserved 2016--</copyright>
    <lastBuildDate>Fri, 20 Apr 2018 10:10:40 +0900</lastBuildDate>
    
	<atom:link href="http://diary.wshito.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ストリームあれこれ</title>
      <link>http://diary.wshito.com/comp/lisp/peek-char/</link>
      <pubDate>Fri, 20 Apr 2018 10:10:40 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/peek-char/</guid>
      <description>&lt;div class=&#34;sect1&#34;&gt;
&lt;h2 id=&#34;_code_peek_char_code_の便利な機能&#34;&gt;&lt;code&gt;peek-char&lt;/code&gt; の便利な機能&lt;/h2&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;ストリームから文字を peek する際，&lt;code&gt;peek-char&lt;/code&gt; の第 1 引数に &lt;code&gt;t&lt;/code&gt; を指定すると空白文字をスキップしてくれる．次に &lt;code&gt;read-char&lt;/code&gt; を実行すると，スキップ後の 1 文字を返す．
&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>UC Davis の Introduction to Graphics Architecture (EEC 277)</title>
      <link>http://diary.wshito.com/comp/cg/eec277/</link>
      <pubDate>Sat, 14 Apr 2018 18:32:22 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/cg/eec277/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;YouTube で UC Davis の講義「Introduction to Graphics Architecture」を視聴し始めました．2009 年に撮影されたようなので今から約 10 年前の講義ということになります．コンピュータ・グラフィックスのハードウェア的側面を扱った講義で，第 1 回の講義を聞いたらとても良かったので，ここに感想とメモを残しておきます．全 14 回を制覇できるかわかりませんが，視聴する度にこのページを更新します．&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ASDF3 on Clozure CL does not search ASD files under the symbolic links</title>
      <link>http://diary.wshito.com/comp/lisp/ccl-init/</link>
      <pubDate>Fri, 13 Apr 2018 18:46:32 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/ccl-init/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I put all my lisp projects under the directory &lt;code&gt;git-repos&lt;/code&gt; and set symbolic links to each projects from &lt;code&gt;~/common-lisp&lt;/code&gt;.  ASDF3 on SBCL loads ASD files under the symbolic links recursively while that on Clozure CL doesn&amp;#8217;t.  If you add those links to source-registry they get loaded on CCL too.  Here is the snipped for CCL to add all the links and directories under &lt;code&gt;~/common-lisp&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Lisp の Sequence 型のまとめ</title>
      <link>http://diary.wshito.com/comp/lisp/sequence/</link>
      <pubDate>Sun, 11 Feb 2018 18:35:29 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/sequence/</guid>
      <description>Common Lisp のソート関数や探索関数は，引数にシーケンス（SEQUENCE）型のオブジェクトを取る．シーケンス型はベクトル（VECTOR）型とリスト（LIST）型の抽象型なので，ベクトルとリストのいずれもそれら関数に渡すことが出来る．では配列（ARRAY型）を引数に渡したい場合はどうか？ Common Lisp ではベクトルは 1 次元配列と同じなので，シーケンスを引数に取る関数に 1 次元配列を渡すのは問題ない． Common Lisp における配列とベク</description>
    </item>
    
    <item>
      <title>コードリーディング: Lack の Session ミドルウェアを理解する</title>
      <link>http://diary.wshito.com/comp/lisp/clack/lack-middleware-session/</link>
      <pubDate>Wed, 07 Feb 2018 15:36:34 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/clack/lack-middleware-session/</guid>
      <description>Webアプリケーションを構築する際にはユーザのセッション管理が必須である．今回は lack-middleware-session のソースを読みながらSessionミドルウェアの使い方を学ぶ．本稿の最後ではSessionミドルウェアを使ったサンプルWebアプリケーションを構築する． Sessionミドルウェアの概観 Sessionミドルウェアはセッション変数として，文字列をキーにしたハッシュテーブルを提供する．つまり，セッション毎にハッシュテーブル</description>
    </item>
    
    <item>
      <title>Roswell 環境下でのローカル・プロジェクト管理入門</title>
      <link>http://diary.wshito.com/comp/lisp/ros-local/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/ros-local/</guid>
      <description>この記事は Lisp Advent Calendar 2017 の4日目の記事として書かれました．コメント，質問等は @waterloo_jp まで． 「 Lisp のパッケージ管理入門．Quicklisp，ASDF，Roswell の違いなど 」では，Quicklisp，ASDF，Roswell の違いを説明し，Roswell の導入部分を解説しました．ここでは，もう少し踏み込んで，自分で開発するプロジェクト（ローカル・プロジェクト）を Roswell の環境下で管理する方法を説明します．本稿の最後で</description>
    </item>
    
    <item>
      <title>Lisp で CouchDB の Getting Started を始めてみる</title>
      <link>http://diary.wshito.com/comp/db/couchdb-manual/getting-started/</link>
      <pubDate>Fri, 20 Oct 2017 22:05:59 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/db/couchdb-manual/getting-started/</guid>
      <description>CouchDBオフィシャル・ドキュメントの Getting Started をLispを使ってやってみた．CouchDBはRESTfulなAPIを提供しているので，特別なドライバを使わなくてもHTTPクライアントがあればDBを操作できる．ここでは，LispのHTTPクライアント・ライブラリ Dexador と，高速なJSONエンコード/デコード・ライブラリ Jonathan を使って，CouchDBと通信する．どちらも日本を代表する若手Lisperによって書か</description>
    </item>
    
    <item>
      <title>コードリーディング: Lack の Mount ミドルウエアを理解する</title>
      <link>http://diary.wshito.com/comp/lisp/clack/lack-middleware-mount/</link>
      <pubDate>Sat, 14 Oct 2017 23:13:44 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/clack/lack-middleware-mount/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;../app&#34;&gt;前回&lt;/a&gt; は &lt;a href=&#34;https://github.com/fukamachi/lack&#34;&gt;Lack&lt;/a&gt; のアプリケーションのコードを追い，ミドルウェアの使われ方を理解した．今回はミドルウェアを一つ取り上げる．今回取り上げるのはMountミドルウェア（&lt;code&gt;lack-middleware-mount&lt;/code&gt;）で，リクエスト・パスに応じたルーティングを司る．最初にミドルウェアのソースを読み，最後にMountミドルウェアを使ったサンプルWebアプリを作成する．コメント，間違いのご指摘等は [@waterloo_jp](&lt;a href=&#34;https://twitter.com/waterloo_jp&#34; class=&#34;bare&#34;&gt;https://twitter.com/waterloo_jp&lt;/a&gt;) まで．
&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>コードリーディング: Lack アプリケーションを理解する</title>
      <link>http://diary.wshito.com/comp/lisp/clack/app/</link>
      <pubDate>Wed, 11 Oct 2017 21:25:26 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/clack/app/</guid>
      <description>&lt;div id=&#34;preamble&#34;&gt;
&lt;div class=&#34;sectionbody&#34;&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.8arrow.org&#34;&gt;深町氏&lt;/a&gt; のウェブアプリケーション・ツール &lt;a href=&#34;https://github.com/fukamachi/clack&#34;&gt;Clack&lt;/a&gt; のソースコード・リーディング．今回は，Clackが起動時に受け取る &lt;a href=&#34;https://github.com/fukamachi/lack&#34;&gt;Lack&lt;/a&gt; アプリケーションを理解するために，その構築プロセスと使われ方をコードで追ってみる．
 &lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Lispの変数とシンボルは同じか？</title>
      <link>http://diary.wshito.com/comp/lisp/binding/</link>
      <pubDate>Mon, 02 Oct 2017 21:20:13 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/binding/</guid>
      <description>David S. Touretzkyの&#34;COMMON LISP: A Gentle Introduction to Symbolic Computation&#34;では，変数に値を代入するという言葉を使い，束縛という言葉を使いません．同書158ページには「シンボルは値と束縛されない．変数だけが値と束縛されうる（Symbols are never bound; only variables can be bound）」と，意味深なことを言っています．そこで，シンボル，変数，束縛について調べてみました． まず，ANSI X3J13のFinal Draftによる</description>
    </item>
    
    <item>
      <title>Hugoのサマリ長（Summary Length）</title>
      <link>http://diary.wshito.com/comp/cms/hugo-summarylength/</link>
      <pubDate>Mon, 02 Oct 2017 10:39:51 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/cms/hugo-summarylength/</guid>
      <description>Hugoではトップページの投稿一覧に表示するサマリの長さがデフォルトで70でした．英語の場合は70単語で良いのですが，日本語では70文字になってしまい圧倒的に少なすぎました．先日ようやく最新のMasterにデフォルトのサマリ長を変更するコードがマージされました． Make SummayLength configurable #3735 Change SummaryLength to be configurable #3924 リポジトリから最新バージョンをビルド，インストールし，config.toml に summaryLength = 200 と指定することで，デフォルトのサマ</description>
    </item>
    
    <item>
      <title>Lispのダイナミック・スコープとスペシャル変数</title>
      <link>http://diary.wshito.com/comp/lisp/dynamic-scope/</link>
      <pubDate>Fri, 22 Sep 2017 18:05:22 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/dynamic-scope/</guid>
      <description>Common Lispのダイナミック・スコープについて勉強したのでまとめてみた．まず，要点は以下の通り． Lispのスコープは，レキシカル・スコープとダイナミック・スコープの2種類ある． ダイナミック・スコープに従う変数をスペシャル変数という． スペシャル変数は defvar か defparameter によって作成される． スペシャル変数と同名の変数が作成されると，スコープを超えて同名のスペシャル変数全てが新しい変数を参照する．つまり，スコープを超えて</description>
    </item>
    
    <item>
      <title>AsciiDocでBouncing Ball</title>
      <link>http://diary.wshito.com/comp/js/canvas/bouncing-ball/</link>
      <pubDate>Wed, 06 Sep 2017 17:33:34 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/js/canvas/bouncing-ball/</guid>
      <description>HTML5のCanvasを画面いっぱいに表示して，Webページにアニメーションを重ねる方法を説明します．実際のデモであるこのページは，AsciiDoc原稿にCanvasを埋め込んで作成したので，AsciiDocでの設定方法についても説明したいと思います．アニメーションのバウンシング・ボールは，中1の息子が夏休みの自由研究で作った Scratchプロジェクトへのオマージュです（笑）． ソースコードはこち</description>
    </item>
    
    <item>
      <title>Hugo で AsciiDoc 原稿を書く際の留意点</title>
      <link>http://diary.wshito.com/comp/cms/hugo-asciidoc/</link>
      <pubDate>Fri, 25 Aug 2017 23:20:41 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/cms/hugo-asciidoc/</guid>
      <description>Hugo は静的にWebサイトを生成するプログラムです．データベースを使って動的にページを生成するCMSと違い，ローカルに作成された全原稿から予めサイト全体のページを生成します．カテゴリやタグのページも静的に生成されます．このサイトも Hugo で作成しています． 原稿ファイルをHTMLに変換するのは Hugo ではなく Hugo が起動する外部プログラムです． Supported Content Formats にサポートする原稿のフォーマットが載っています．拡張されたMarkdo</description>
    </item>
    
    <item>
      <title>アセンブリを始めてみる</title>
      <link>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</link>
      <pubDate>Mon, 12 Jun 2017 21:15:11 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</guid>
      <description>マイコンをもっと極めたい．その一心でひたすら低水準（マシン寄り）の勉強をしていると，結局アセンブリやリンカスクリプトの勉強に辿り着く． 坂井氏の「12ステップで作る組込みOS自作入門」をやってH8のアセンブリを勉強するか，それとも，もっと基礎から書かれたCASLの解説書の方が良いか．CASL IIの本ではKindleで読める「アセンブリ言語スタートブック」が良さそうだ．でもシュミレーターで動く言語じゃ</description>
    </item>
    
    <item>
      <title>次のマイクロマウス製作に向けて</title>
      <link>http://diary.wshito.com/elec/micromouse/micromouse2017/</link>
      <pubDate>Thu, 16 Feb 2017 19:59:57 +0900</pubDate>
      
      <guid>http://diary.wshito.com/elec/micromouse/micromouse2017/</guid>
      <description>初出場の2016年九州地区大会では完走できなかった．今年は初号機を調整して完走を目指すと同時に，もっと速いマウスの製作にも挑戦したい．DCマウスも作ってみたいが，まだ完走も出来ていないので，今年も基本に忠実にステッパーでいこうと思う． 今年は新しいスキルを身につけるために，以下のことにチャレンジしたい． 3D CADを使って機体を設計する． KiCadを使って基板を設計する． 新しいMPUを採用する． マウスの</description>
    </item>
    
    <item>
      <title>uvbook -- libuvの仕組みとidle-basicの解説</title>
      <link>http://diary.wshito.com/comp/lisp/uvbook/uvbook-idle-basic/</link>
      <pubDate>Fri, 06 Jan 2017 00:05:25 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/uvbook/uvbook-idle-basic/</guid>
      <description>libuvのチュートリアルuvbook，第２節のIdlingプログラムを解説します．libuvはNode.jsの根幹部分を担うCライブラリです．IdlingプログラムのLispによる実装例は後ほど別ページとして投稿します．間違い，コメント等は@waterloo_jpまで． 下のコードは，uvbookのIdleハンドル使用例です．ここでは下のコード例を追いながら，Idleハンドルの使い方と，libuv</description>
    </item>
    
    <item>
      <title>uvbook for Lisp -- Hello World</title>
      <link>http://diary.wshito.com/comp/lisp/uvbook/uvlisp-helloworld/</link>
      <pubDate>Sun, 01 Jan 2017 01:21:32 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/uvbook/uvlisp-helloworld/</guid>
      <description>&lt;p&gt;ここでは，&lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;libuv&lt;/a&gt;のチュートリアル本，&lt;a href=&#34;http://nikhilm.github.io/uvbook/basics.html#hello-world&#34;&gt;uvbookの第2.2節&lt;/a&gt;に載っている以下のHello WorldコードをLispで実装する手順を解説します．まず始めに&lt;a href=&#34;https://common-lisp.net/project/cffi/&#34;&gt;CFFI&lt;/a&gt;を使って直接libuvの関数を呼び出す方法を解説し，最後にlibuvラッパーの&lt;a href=&#34;https://github.com/orthecreedence/cl-libuv&#34;&gt;cl-libuv&lt;/a&gt;を使った実装方法を解説します．間違い，コメント等ありましたら，&lt;a href=&#34;https://twitter.com/waterloo_jp&#34;&gt;@waterloo_jp&lt;/a&gt;までお願いします．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lispのパッケージ管理入門．Quicklisp，ASDF，Roswellの違いなど</title>
      <link>http://diary.wshito.com/comp/lisp/lisp-pm/</link>
      <pubDate>Fri, 23 Dec 2016 15:25:34 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/lisp-pm/</guid>
      <description>Lispを始めたばかりで，まだ規模の大きいプログラムを書いていないため，パッケージ管理やらライブラリの依存関係解決などわからないことだらけで，QuicklispやASDF，CIM，Roswell等，色々調べました．包括的かつ初心者に優しいリソースがなく，最初は苦労しました．解説がどれも各ツールの使い方に特化していて，他のツールの関係や，どのツールが必要で，どの機能が重複しているかなどの解説がなかっ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第６話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/6/</link>
      <pubDate>Sun, 20 Nov 2016 15:51:03 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/6/</guid>
      <description>本章ではリスト処理を行う関数を再帰を使って書く練習をしながら，関数の処理時間の見積もり方と最適なコードのへの書き換え方を学ぶ．本ページではまず第５話と６話の間に挿入されたLispのコンパイル方法と，第６話で説明されている関数のトレースの仕方についてまとめ，その後，処理時間の見積もり方と，効率的なコードへの書き換えについてまとめる． Lispのコンパイル方法 REPLで作業をしている時，定義済みの関数や</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第５話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/5/</link>
      <pubDate>Thu, 17 Nov 2016 23:34:58 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/5/</guid>
      <description>この章では再帰の基本から，末尾再帰への書き換え方について解説している．またエディタにプログラムを書いてLispインタプリタに読み込む方法も説明している． 末尾再帰とは 再帰的に定義された関数の末尾で，自分自身を呼び出した戻り値をそのままリターンする関数定義． 末尾再帰の例（ユークリッドの互除法） (defun gcd2 (m n) (if (= (mod m n) 0) n (gcd2 n (mod m n)))) 最後の行で自分自身`gcd2`への呼び出しで終わっている．すなわち，自分自身へ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第４話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/4/</link>
      <pubDate>Tue, 15 Nov 2016 22:11:47 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/4/</guid>
      <description>この章ではリストから要素を取り出す方法と，要素からリストを構築する方法について書かれている．car，cdr，cons の基本関数以外に，便利な関数が幾つか紹介されている． 要素の取り出し first, second, &amp;#8230;&amp;#8203;., tenth 第1要素から第10要素まで簡単に取りだす関数が用意されている． elt Element関数はリストから任意位置の要素を取り出せる．位置のインデックスは0から数える． &amp;gt; (elt &#39;(0 1 2 3 4 5) 3) 3 last リストの末尾の要素を取り出す． 末</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第3話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/3/</link>
      <pubDate>Mon, 14 Nov 2016 21:49:25 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/3/</guid>
      <description>Lispのデータ型 リスト以外はアトム（1つだけ例外あり？p.24）． NULL型はリストでありシンボルである． NULL型のリストは空リスト()でNILと同値． NULL型のデータはシンボルNILのみ． シンボルNILの値もNIL． フォームとデータ (p.32) Lispはプログラムもデータもリストで表現できるからややこしく見える． リストなどの表現をデータとしてではなく，プログラムのつもりで見ている時は，その表現を *フ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第2話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/2/</link>
      <pubDate>Mon, 14 Nov 2016 19:27:25 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/2/</guid>
      <description>関数と変数の作成 defun 関数定義 全ての引数は評価されない（マクロで通常の関数ではない）． setf 変数への代入 変数宣言なしで新たに変数が作れる．トップレベルで使えばスペシャル変数（大域変数），関数内で使えばレキシカル変数（ローカル変数）を作れる．第１引数は評価されない（マクロで通常の関数ではない）． 共通点 どちらも副作用がある．つまり処理をして値を返すだけでない． defunは関数を実行できるよう定義する副作用を持</description>
    </item>
    
    <item>
      <title>Buffered IO or Unbuffered IO</title>
      <link>http://diary.wshito.com/comp/prog/buffered-io-or-unbuffered-io/</link>
      <pubDate>Wed, 09 Nov 2016 19:29:46 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/prog/buffered-io-or-unbuffered-io/</guid>
      <description>ネットワーク越しにパケットを送受信するプログラム例を読んでいたら，Unbuffered IOのread()，write()を使用している理由が気になって調べてみた．普通のIOならシステムコールを減らすためにBuffered IOを使用するがなぜネットワークプログラミングではどの例もUnbufferedなのか？調べた結果は後でブログにまとめるとして，見つけた解説記事を載せておきます． Buffered vs unbuffered IO (stack overflow) - バッフ</description>
    </item>
    
    <item>
      <title>マイサイトの立ち上げ</title>
      <link>http://diary.wshito.com/2016/11-06-backagain/</link>
      <pubDate>Sun, 06 Nov 2016 20:43:33 +0900</pubDate>
      
      <guid>http://diary.wshito.com/2016/11-06-backagain/</guid>
      <description>約10年ほど閉鎖していた独自ドメインのサイトを立ち上げてみた．ブログには誰かの役に立ちそうな情報を，日記にはつまらないメモを書いていくつもり．いつまで続くやら． 前に使っていたのはNucleusというブログシステムだったが今回は流行に乗りWordpressを使うことにした．またサーバーもデスクトップマシンではなく，RaspberryPIを使用．かなり省エネになるんじゃないかな． 追記（2016/11/</description>
    </item>
    
  </channel>
</rss>