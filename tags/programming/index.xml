<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on wshito&#39;s diary</title>
    <link>http://diary.wshito.com/tags/programming/</link>
    <description>Recent content in Programming on wshito&#39;s diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>All rights reserved 2016--</copyright>
    <lastBuildDate>Sun, 11 Feb 2018 18:35:29 +0900</lastBuildDate>
    
	<atom:link href="http://diary.wshito.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lisp の Sequence 型のまとめ</title>
      <link>http://diary.wshito.com/comp/lisp/sequence/</link>
      <pubDate>Sun, 11 Feb 2018 18:35:29 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/sequence/</guid>
      <description>Common Lisp のソート関数や探索関数は，引数にシーケンス（SEQUENCE）型のオブジェクトを取る．シーケンス型はベクトル（VECTOR）型とリスト（LIST）型の抽象型なので，ベクトルとリストのいずれもそれら関数に渡すことが出来る．では配列（ARRAY型）を引数に渡したい場合はどうか？ Common Lisp ではベクトルは 1 次元配列と同じなので，シーケンスを引数に取る関数に 1 次元配列を渡すのは問題ない． Common Lisp における配列とベク</description>
    </item>
    
    <item>
      <title>Roswell 環境下でのローカル・プロジェクト管理入門</title>
      <link>http://diary.wshito.com/comp/lisp/ros-local/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/ros-local/</guid>
      <description>この記事は Lisp Advent Calendar 2017 の4日目の記事として書かれました．コメント，質問等は @waterloo_jp まで． 「 Lispのパッケージ管理入門．Quicklisp，ASDF，Roswellの違いなど 」では，Quicklisp，ASDF，Roswellの違いを説明し，Roswellの導入部分を解説しました．ここでは，もう少し踏み込んで，自分で開発するプロジェクト（ローカル・プロジェクト）をRoswellの環境下で管理する方法を説明し</description>
    </item>
    
    <item>
      <title>アセンブリを始めてみる</title>
      <link>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</link>
      <pubDate>Mon, 12 Jun 2017 21:15:11 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</guid>
      <description>マイコンをもっと極めたい．その一心でひたすら低水準（マシン寄り）の勉強をしていると，結局アセンブリやリンカスクリプトの勉強に辿り着く． 坂井氏の「12ステップで作る組込みOS自作入門」をやってH8のアセンブリを勉強するか，それとも，もっと基礎から書かれたCASLの解説書の方が良いか．CASL IIの本ではKindleで読める「アセンブリ言語スタートブック」が良さそうだ．でもシュミレーターで動く言語じゃ</description>
    </item>
    
    <item>
      <title>uvbook for Lisp -- Hello World</title>
      <link>http://diary.wshito.com/comp/lisp/uvbook/uvlisp-helloworld/</link>
      <pubDate>Sun, 01 Jan 2017 01:21:32 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/uvbook/uvlisp-helloworld/</guid>
      <description>&lt;p&gt;ここでは，&lt;a href=&#34;https://github.com/libuv/libuv&#34;&gt;libuv&lt;/a&gt;のチュートリアル本，&lt;a href=&#34;http://nikhilm.github.io/uvbook/basics.html#hello-world&#34;&gt;uvbookの第2.2節&lt;/a&gt;に載っている以下のHello WorldコードをLispで実装する手順を解説します．まず始めに&lt;a href=&#34;https://common-lisp.net/project/cffi/&#34;&gt;CFFI&lt;/a&gt;を使って直接libuvの関数を呼び出す方法を解説し，最後にlibuvラッパーの&lt;a href=&#34;https://github.com/orthecreedence/cl-libuv&#34;&gt;cl-libuv&lt;/a&gt;を使った実装方法を解説します．間違い，コメント等ありましたら，&lt;a href=&#34;https://twitter.com/waterloo_jp&#34;&gt;@waterloo_jp&lt;/a&gt;までお願いします．&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Lispのパッケージ管理入門．Quicklisp，ASDF，Roswellの違いなど</title>
      <link>http://diary.wshito.com/comp/lisp/lisp-pm/</link>
      <pubDate>Fri, 23 Dec 2016 15:25:34 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/lisp-pm/</guid>
      <description>Lispを始めたばかりで，まだ規模の大きいプログラムを書いていないため，パッケージ管理やらライブラリの依存関係解決などわからないことだらけで，QuicklispやASDF，CIM，Roswell等，色々調べました．包括的かつ初心者に優しいリソースがなく，最初は苦労しました．解説がどれも各ツールの使い方に特化していて，他のツールの関係や，どのツールが必要で，どの機能が重複しているかなどの解説がなかっ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第６話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/6/</link>
      <pubDate>Sun, 20 Nov 2016 15:51:03 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/6/</guid>
      <description>本章ではリスト処理を行う関数を再帰を使って書く練習をしながら，関数の処理時間の見積もり方と最適なコードのへの書き換え方を学ぶ．本ページではまず第５話と６話の間に挿入されたLispのコンパイル方法と，第６話で説明されている関数のトレースの仕方についてまとめ，その後，処理時間の見積もり方と，効率的なコードへの書き換えについてまとめる． Lispのコンパイル方法 REPLで作業をしている時，定義済みの関数や</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第５話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/5/</link>
      <pubDate>Thu, 17 Nov 2016 23:34:58 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/5/</guid>
      <description>この章では再帰の基本から，末尾再帰への書き換え方について解説している．またエディタにプログラムを書いてLispインタプリタに読み込む方法も説明している． 末尾再帰とは 再帰的に定義された関数の末尾で，自分自身を呼び出した戻り値をそのままリターンする関数定義． 末尾再帰の例（ユークリッドの互除法） (defun gcd2 (m n) (if (= (mod m n) 0) n (gcd2 n (mod m n)))) 最後の行で自分自身`gcd2`への呼び出しで終わっている．すなわち，自分自身へ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第４話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/4/</link>
      <pubDate>Tue, 15 Nov 2016 22:11:47 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/4/</guid>
      <description>この章ではリストから要素を取り出す方法と，要素からリストを構築する方法について書かれている．car，cdr，cons の基本関数以外に，便利な関数が幾つか紹介されている． 要素の取り出し first, second, &amp;#8230;&amp;#8203;., tenth 第1要素から第10要素まで簡単に取りだす関数が用意されている． elt Element関数はリストから任意位置の要素を取り出せる．位置のインデックスは0から数える． &amp;gt; (elt &#39;(0 1 2 3 4 5) 3) 3 last リストの末尾の要素を取り出す． 末</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第3話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/3/</link>
      <pubDate>Mon, 14 Nov 2016 21:49:25 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/3/</guid>
      <description>Lispのデータ型 リスト以外はアトム（1つだけ例外あり？p.24）． NULL型はリストでありシンボルである． NULL型のリストは空リスト()でNILと同値． NULL型のデータはシンボルNILのみ． シンボルNILの値もNIL． フォームとデータ (p.32) Lispはプログラムもデータもリストで表現できるからややこしく見える． リストなどの表現をデータとしてではなく，プログラムのつもりで見ている時は，その表現を *フ</description>
    </item>
    
    <item>
      <title>「対話によるCommon Lisp入門」第2話まとめノート</title>
      <link>http://diary.wshito.com/comp/lisp/cl-dialogue/2/</link>
      <pubDate>Mon, 14 Nov 2016 19:27:25 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/cl-dialogue/2/</guid>
      <description>関数と変数の作成 defun 関数定義 全ての引数は評価されない（マクロで通常の関数ではない）． setf 変数への代入 変数宣言なしで新たに変数が作れる．トップレベルで使えばスペシャル変数（大域変数），関数内で使えばレキシカル変数（ローカル変数）を作れる．第１引数は評価されない（マクロで通常の関数ではない）． 共通点 どちらも副作用がある．つまり処理をして値を返すだけでない． defunは関数を実行できるよう定義する副作用を持</description>
    </item>
    
    <item>
      <title>Buffered IO or Unbuffered IO</title>
      <link>http://diary.wshito.com/comp/prog/buffered-io-or-unbuffered-io/</link>
      <pubDate>Wed, 09 Nov 2016 19:29:46 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/prog/buffered-io-or-unbuffered-io/</guid>
      <description>ネットワーク越しにパケットを送受信するプログラム例を読んでいたら，Unbuffered IOのread()，write()を使用している理由が気になって調べてみた．普通のIOならシステムコールを減らすためにBuffered IOを使用するがなぜネットワークプログラミングではどの例もUnbufferedなのか？調べた結果は後でブログにまとめるとして，見つけた解説記事を載せておきます． Buffered vs unbuffered IO (stack overflow) - バッフ</description>
    </item>
    
  </channel>
</rss>