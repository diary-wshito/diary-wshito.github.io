<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on wshito&#39;s diary</title>
    <link>http://diary.wshito.com/categories/programming/</link>
    <description>Recent content in Programming on wshito&#39;s diary</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <copyright>All rights reserved 2016--</copyright>
    <lastBuildDate>Mon, 26 Mar 2018 20:29:11 +0900</lastBuildDate>
    
	<atom:link href="http://diary.wshito.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lisp マシンのアセンブリを事始め（1）</title>
      <link>http://diary.wshito.com/comp/as/nekketsu/ch01-01/</link>
      <pubDate>Mon, 26 Mar 2018 20:29:11 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/as/nekketsu/ch01-01/</guid>
      <description>Lisp コードが吐くマシン語に翻訳されているか理解できたらいいなと思う．アセンブリは初心者なので，簡単な処理をアセンブリに変換して少しずつ読んでみることにする． マシンの確認 使用マシンは Mac OSX El Capitan 10.11，処理系は SBCL で詳細は以下の通り． (machine-type) ;=&amp;gt; &#34;X86-64&#34; (machine-version) ;=&amp;gt; &#34;Intel(R) Core(TM) i7-5650U CPU @ 2.20GHz&#34; (software-type) ;=&amp;gt; &#34;Darwin&#34; (software-version) ;=&amp;gt; &#34;15.6.0&#34; (lisp-implementation-type) ;=&amp;gt; &#34;SBCL&#34; (lisp-implementation-version) ;=&amp;gt; &#34;1.4.1&#34; NIL を返す関数 nil を返す return-nil 関数を定義する． (defun return-nil () nil) 逆アセンブルの結果は以下の通り． コード 1. return-nil のアセンブリコード (disassemble &#39;return-nil) ; disassembly for RETURN-NIL ; Size: 23 bytes.</description>
    </item>
    
    <item>
      <title>Lisp の Sequence 型のまとめ</title>
      <link>http://diary.wshito.com/comp/lisp/sequence/</link>
      <pubDate>Sun, 11 Feb 2018 18:35:29 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/sequence/</guid>
      <description>Common Lisp のソート関数や探索関数は，引数にシーケンス（SEQUENCE）型のオブジェクトを取る．シーケンス型はベクトル（VECTOR）型とリスト（LIST）型の抽象型なので，ベクトルとリストのいずれもそれら関数に渡すことが出来る．では配列（ARRAY型）を引数に渡したい場合はどうか？ Common Lisp ではベクトルは 1 次元配列と同じなので，シーケンスを引数に取る関数に 1 次元配列を渡すのは問題ない． Common Lisp における配列とベク</description>
    </item>
    
    <item>
      <title>Roswell 環境下でのローカル・プロジェクト管理入門</title>
      <link>http://diary.wshito.com/comp/lisp/ros-local/</link>
      <pubDate>Mon, 04 Dec 2017 00:00:00 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/lisp/ros-local/</guid>
      <description>この記事は Lisp Advent Calendar 2017 の4日目の記事として書かれました．コメント，質問等は @waterloo_jp まで． 「 Lisp のパッケージ管理入門．Quicklisp，ASDF，Roswell の違いなど 」では，Quicklisp，ASDF，Roswell の違いを説明し，Roswell の導入部分を解説しました．ここでは，もう少し踏み込んで，自分で開発するプロジェクト（ローカル・プロジェクト）を Roswell の環境下で管理する方法を説明します．本稿の最後で</description>
    </item>
    
    <item>
      <title>アセンブリを始めてみる</title>
      <link>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</link>
      <pubDate>Mon, 12 Jun 2017 21:15:11 +0900</pubDate>
      
      <guid>http://diary.wshito.com/comp/as/step-by-step/begin-assembly/</guid>
      <description>マイコンをもっと極めたい．その一心でひたすら低水準（マシン寄り）の勉強をしていると，結局アセンブリやリンカスクリプトの勉強に辿り着く． 坂井氏の「12ステップで作る組込みOS自作入門」をやってH8のアセンブリを勉強するか，それとも，もっと基礎から書かれたCASLの解説書の方が良いか．CASL IIの本ではKindleで読める「アセンブリ言語スタートブック」が良さそうだ．でもシュミレーターで動く言語じゃ</description>
    </item>
    
  </channel>
</rss>